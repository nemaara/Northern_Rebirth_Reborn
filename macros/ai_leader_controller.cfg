#textdomain wesnoth-nrr

# The main macro is AI_CONTROLLER_ALLOW_MOVEMENT_CONTROL ID SIDE.
# It allows you to order a leader to move to a specifc hex. It will then STAY there--at
# least until the end of the turn. (The mainline macro allows the leader to continue to
# a different hex after arriving.) This macro also allows the player to order the leader
# not to move at all. Both actions are visible: There is an X marking the movement
# target, and mousing over a frozen leader shows that they can't move.

# This doesn't integrate well with the current, mainline control macros, but it could be
# added as a separate macro. (It could replace one of the current ones.)

# by beetlenaut

# --------------UTILITY MACROS-------------------------------------------
#define MODIFY_STATUS NEW_STATUS ID
    [modify_unit]
        [filter]
            id={ID}
        [/filter]
        [status]
            {NEW_STATUS}
        [/status]
    [/modify_unit]
#enddef

# This is short, but it's used a lot.
#define IS_STATUS STATUS ID
    [have_unit]
        id={ID}
        status={STATUS}
    [/have_unit]
#enddef

# Some menu items shouldn't work if they are activated on a unit other than the leader.
# This block can be added to a conditional to perform that test.
#define NOT_ON_OTHER_UNIT ID
    [and]
        [not]
            [have_unit]
                x, y=$x1, $y1
                [not]
                    id={ID}
                [/not]
            [/have_unit]
        [/not]
    [/and]
#enddef

# Removes the X shown on a target hex.
#define REMOVE_MOVEMENT_TARGET SIDE
    [remove_item]
        image=target_{SIDE}
    [/remove_item]
    [redraw]
    [/redraw]
#enddef

#define FREEZE_UNIT ID
    {MODIFY_STATUS (frozen=yes) {ID} }
    [object]
        id=freezer
        take_only_once=no
        silent=yes
        duration=scenario  # So this object will not be in the save files forever.
        [filter]
            id={ID}
            # Check the movement_cost of the current hex to make sure the unit is
            # not already frozen. If it is, it can stay that way, but we won't
            # actually want to add anything to its movement costs.
            movement_cost=1-49
        [/filter]
        [effect]
            apply_to=movement_costs
            replace=no  # So this amount is added to the current number.
            [movement_costs]
                frozen=50
                castle=50
                sand=50
                forest=50
                flat=50
                hills=50
                mountains=50
                unwalkable=50
                swamp_water=50
                fungus=50
                cave=50
                village=50
                deep_water=50
                reef=50
                shallow_water=50
                impassable=50
            [/movement_costs]
        [/effect]
    [/object]
#enddef

#define THAW_UNIT ID
    {MODIFY_STATUS (frozen=no) {ID} }
    [remove_object]
        id={ID}
        object_id=freezer
    [/remove_object]
#enddef

#define CLEAN_UP SIDE
    [clear_menu_item]
        id=leader_control_option_{SIDE}_freeze_on, leader_control_option_{SIDE}_freeze_off, leader_control_option_{SIDE}_target_on, leader_control_option_{SIDE}_target_off
    [/clear_menu_item]
    {REMOVE_MOVEMENT_TARGET {SIDE} }
    # Instead of clearing these variables after ever time they are created, we can just
    # do it once at the end.
    [clear_variable]
        name=stored_leader, stored_side, leader_path
    [/clear_variable]
#enddef

# --------------MAIN MACRO-------------------------------------------
# This long macro sets up the required events. The {ID} could be removed, but in that
# case, the leader's ID would need to be stored for every [command] and [event].
#define AI_CONTROLLER_ALLOW_MOVEMENT_CONTROL ID SIDE
    [event]
        name=prestart

        # We need these stored to set up the menu items: We need the leader's name for
        # the descriptions and the side's color for the icon images.
        [store_side]
            side={SIDE}
            variable=stored_side
        [/store_side]
        [store_unit]
            [filter]
                id={ID}
            [/filter]
            variable=stored_leader
        [/store_unit]

        # These modifications are only needed if the leader is persistent between
        # scenarios, but they don't hurt if not.
        {MODIFY_STATUS (moving_to_target=no) {ID} }
        {MODIFY_STATUS (frozen=no) {ID} }

        # --------------MENU ITEM PAIR 1-------------------------------------------
        # The first menu item allows you to freeze the leader in place. They will still
        # attack or defend, but they will not go anywhere. The second version of the
        # item allows them to move again. Mousing over the leader will show their
        # restricted range of motion.
        [set_menu_item]
            id=leader_control_option_{SIDE}_freeze_on
            description= _ "Tell $stored_leader.name not to move."
            # The image is already 18x18, but SCALE is used in case the image isn't
            # found. The "Image Not Found" icon is too large to fit here.
            image=leader_order_icon.png~RC(magenta>$stored_side.color)~SCALE(18,18)

            [show_if]
                [not]
                    {IS_STATUS frozen {ID} }
                [/not]
                {NOT_ON_OTHER_UNIT {ID} }
            [/show_if]

            [command]
                {FREEZE_UNIT {ID} }
                # Cancel any movement orders:
                {MODIFY_STATUS (moving_to_target=no) {ID} }
                {CLEAR_AI_ALWAYS_ASPECT_LEADER_GOAL {SIDE} }
                {REMOVE_MOVEMENT_TARGET {SIDE} }
            [/command]
        [/set_menu_item]

        [set_menu_item]
            id=leader_control_option_{SIDE}_freeze_off
            description= _ "Allow $stored_leader.name to move."
            image=leader_order_icon.png~RC(magenta>$stored_side.color)~SCALE(18,18)

            [show_if]
                {IS_STATUS frozen {ID} }
                {NOT_ON_OTHER_UNIT {ID} }
            [/show_if]

            [command]
                {THAW_UNIT {ID}}
            [/command]
        [/set_menu_item]

        # --------------MENU ITEM PAIR 2-------------------------------------------
        #This menu item allows you to order an allied leader move to a specific hex.
        # The second version of this item cancels a movement order. An X is placed on
        # the target hex.
        # This won't work on an occupied hex because the leader always moves first.
        # The other unit might exit the hex later, but the leader will have already
        # come to a stop, and the AI will have canceled the move.
        [set_menu_item]
            id=leader_control_option_{SIDE}_target_on
            description= _ "Tell $stored_leader.name to move here."
            image=leader_order_icon.png~RC(magenta>$stored_side.color)~SCALE(18,18)

            [show_if]
                [not]
                    {IS_STATUS moving_to_target {ID} }
                [/not]
                # Since it won't work correctly on an occupied hex, we won't show
                # the menu item there.
                [and]
                    [not]
                        [have_unit]
                            x, y=$x1, $y1
                        [/have_unit]
                    [/not]
                [/and]
                # Impassable terrain is also excluded.
                [and]
                    [not]
                        [have_location]
                            x, y=$x1, $y1
                            terrain=X*^*, *^X*
                        [/have_location]
                    [/not]
                [/and]
            [/show_if]

            [command]
                # We need this to get the color of the side at runtime.
                [store_side]
                    side={SIDE}
                    variable=stored_side
                [/store_side]
                # The X icon is added to a blank hex image (with BLIT) so it can
                # be managed more precisely.
                [item]
                    name=target_{SIDE}
                    image=misc/blank-hex.png~BLIT(leader_target_icon.png~RC(magenta>$stored_side.color),19,16)
                    x, y=$x1, $y1
                [/item]

                [modify_unit]
                    [filter]
                        id={ID}
                    [/filter]
                    # We don't use goto_x and goto_y because that makes the unit
                    # move immediately. It doesn't allow them to recruit first,
                    # which should be allowed.
                    [variables]
                        target_x=$x1
                        target_y=$y1
                    [/variables]
                [/modify_unit]

                {MODIFY_STATUS (moving_to_target=yes) {ID} }
                # These commands are copied from the original, mainline AI control macro.
                {CLEAR_AI_ALWAYS_ASPECT_LEADER_GOAL {SIDE} }
                {MODIFY_AI_ADD_ASPECT {SIDE} leader_goal {AI_ASPECT_LEADER_GOAL_RISKY_MOVE_TO $x1 $y1} }
                # In case the leader is currently frozen...
                {THAW_UNIT {ID} }
            [/command]
        [/set_menu_item]

        [set_menu_item]
            id=leader_control_option_{SIDE}_target_off
            description= _ "Cancel $stored_leader.name|'s movement order."
            image=leader_order_icon.png~RC(magenta>$stored_side.color)~SCALE(18,18)

            [show_if]
                {IS_STATUS moving_to_target {ID} }
                {NOT_ON_OTHER_UNIT {ID} }
            [/show_if]

            [command]
                {MODIFY_STATUS (moving_to_target=no) {ID} }
                {REMOVE_MOVEMENT_TARGET {SIDE} }
                {CLEAR_AI_ALWAYS_ASPECT_LEADER_GOAL {SIDE} }
            [/command]
        [/set_menu_item]
    [/event]

    # --------------OTHER EVENTS-------------------------------------------
    # If the leader has a target set, and he can get there this turn, give him just enough
    # movement points to get there. That way he will stop and not head off somewhere
    # else immediately.
    [event]
        name=side {SIDE} turn refresh
        first_time_only=no

        [if]
            {IS_STATUS moving_to_target {ID} }
            [then]
                # The path has to be checked each turn in case a ZOC has
                # changed things.
                [store_unit]
                    [filter]
                        id={ID}
                    [/filter]
                    variable=stored_leader
                [/store_unit]
                [find_path]
                    [traveler]
                        id={ID}
                    [/traveler]
                    [destination]
                        x=$stored_leader.variables.target_x
                        y=$stored_leader.variables.target_y
                    [/destination]
                    allow_multiple_turns=yes
                    variable=leader_path
                [/find_path]

                [if]
                    [variable]
                        # He can get there this turn.
                        name=leader_path.required_turns
                        equals=1
                    [/variable]
                    [then]
                        [modify_unit]
                            [filter]
                                id={ID}
                            [/filter]
                            # The cost of reaching the target hex:
                            moves=$leader_path.movement_cost
                        [/modify_unit]
                        # The status can be cleared now, while the AI_ASPECT
                        # causing the unit to move is still in effect. (We can't
                        # wait until the leader arrives on the target hex anyway
                        # because they won't ever get there if it is occupied.)
                        {MODIFY_STATUS (moving_to_target=no) {ID} }
                    [/then]
                [/if]
            [/then]
        [/if]
    [/event]

    # Removes target image if the leader is finished moving to it.
    [event]
        name=moveto
        first_time_only=no
        [filter]
            id={ID}
            [not]
                # If the unit was moving before, this status would have been
                # cleared in the refresh event.
                status=moving_to_target
            [/not]
        [/filter]
        [if]
            [then]
                {REMOVE_MOVEMENT_TARGET {SIDE} }
            [/then]
        [/if]
    [/event]

    # These two events clean up the menu items and variables when they no longer matter.
    [event]
        name=last breath
        [filter]
            id={ID}
        [/filter]
        {CLEAN_UP {SIDE} }
    [/event]

    [event]
        name=local_victory
        {CLEAN_UP {SIDE} }
    [/event]
#enddef
